#!/usr/bin/env python3
"""
GUI aplikace pro testov√°n√≠ RF-DETR Hard Hat Workers modelu
Umo≈æ≈àuje vybrat obr√°zek a zobrazit detekce s bounding boxy
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk, ImageDraw, ImageFont
import torch
import cv2
import numpy as np
from pathlib import Path
import json
import os
import sys

# Import RF-DETR
try:
    from rfdetr.detr import RFDETRMedium
except ImportError:
    print("‚ö†Ô∏è  Nelze importovat rfdetr. Ujisti se, ≈æe je nainstalovan√Ω!")
    exit(1)


class ModelTesterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("RF-DETR Hard Hat Workers - Model Tester üéØ")
        self.root.geometry("1400x900")
        
        # Config soubor
        self.config_file = Path("gui_config.json")
        self.config = self.load_config()
        
        # Podporovan√© form√°ty obr√°zk≈Ø (case-insensitive)
        self.supported_formats = {
            '.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', 
            '.webp', '.ppm', '.pgm', '.pbm'
        }
        
        # Model a kategorie - OPRAVEN√â podle skuteƒçn√Ωch MODEL ID!
        # Model ƒç√≠sluje od 0: head=0, helmet=1, person=2
        self.model = None
        self.model_path = None
        self.categories = {
            1: "head",      # Model ID 0 = head
            2: "helmet",    # Model ID 1 = helmet (p≈ôilby!)
            3: "person"     # Model ID 2 = person
        }
        
        # Barvy pro kategorie (RGB form√°t pro PIL) - OPRAVEN√â
        self.colors = {
            0: (255, 165, 0),   # head - oran≈æov√°
            1: (0, 255, 0),     # helmet - zelen√° (nejd≈Øle≈æitƒõj≈°√≠!)
            2: (0, 0, 255)      # person - modr√°
        }
        
        # Souƒçasn√Ω obr√°zek
        self.current_image = None
        self.original_image = None
        self.display_scale = 1.0
        
        # Automatick√© hled√°n√≠ modelu p≈ôi startu
        self.auto_find_model()
        
        self.setup_gui()
        
        # Aktualizace GUI statusu po naƒçten√≠
        self.update_gui_status()
        
    def load_config(self):
        """Naƒçte konfiguraci"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r') as f:
                    return json.load(f)
        except:
            pass
        return {"last_model_path": None, "last_image_dir": None, "confidence": 0.5}
        
    def save_config(self):
        """Ulo≈æ√≠ konfiguraci"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.config, f, indent=2)
        except Exception as e:
            print(f"Chyba p≈ôi ukl√°d√°n√≠ config: {e}")
        
    def auto_find_model(self):
        """Automaticky najde model p≈ôi startu"""
        # Zkus√≠me nap≈ôed ulo≈æen√Ω model z config
        if self.config.get("last_model_path") and Path(self.config["last_model_path"]).exists():
            if self.load_model_from_path(self.config["last_model_path"]):
                print(f"‚úÖ Naƒçten model z config: {self.config['last_model_path']}")
                return
                
        # Pokud config neexistuje, hled√°me automaticky
        possible_paths = [
            "hardhat_workers_model/checkpoint_best_total.pth",
            "hardhat-prepared/checkpoint_best_total.pth"
        ]
        
        for path in possible_paths:
            if Path(path).exists():
                try:
                    if self.load_model_from_path(path):
                        print(f"‚úÖ Automaticky naƒçten model: {path}")
                        return
                except:
                    continue
                    
    def update_gui_status(self):
        """Aktualizuje status v GUI"""
        if hasattr(self, 'model_status'):
            if self.model is not None and self.model_path:
                self.model_status.config(text=f"‚úÖ Model naƒçten: {Path(self.model_path).name}")
            else:
                self.model_status.config(text="‚ùå Model nen√≠ naƒçten")
                
    def is_supported_image(self, file_path):
        """Kontroluje, zda je soubor podporovan√Ω obr√°zek"""
        if not Path(file_path).exists():
            return False
        
        suffix = Path(file_path).suffix.lower()
        return suffix in self.supported_formats
        
    def load_model_from_path(self, model_path):
        """Naƒçte model z cesty pomoc√≠ RF-DETR konstruktoru"""
        try:
            from rfdetr.detr import RFDETRMedium
            
            print(f"üì¶ Naƒç√≠t√°m model: {model_path}")
            
            # Nejprve zkontroluj existenci souboru
            if not Path(model_path).exists():
                raise FileNotFoundError(f"Model soubor neexistuje: {model_path}")
            
            # RF-DETR zp≈Øsob - pou≈æij checkpoint jako pretrain_weights
            self.model = RFDETRMedium(pretrain_weights=str(model_path))
            self.model_path = str(model_path)  # ULO≈Ω√çME CESTU!
            
            # ULO≈Ω√çME DO CONFIG
            self.config["last_model_path"] = str(model_path)
            self.save_config()
            
            print(f"‚úÖ Model naƒçten z {model_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ modelu: {e}")
            import traceback
            traceback.print_exc()
            self.model = None
            self.model_path = None
            return False
        
    def setup_gui(self):
        """Nastaven√≠ GUI"""
        # Hlavn√≠ frame
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Horn√≠ panel - naƒçten√≠ modelu
        top_frame = ttk.LabelFrame(main_frame, text="ü§ñ Model", padding=10)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Tlaƒç√≠tko pro naƒçten√≠ modelu
        ttk.Button(top_frame, text="üìÅ Naƒç√≠st model", 
                  command=self.load_model).pack(side=tk.LEFT, padx=(0, 10))
        
        # Status modelu
        self.model_status = ttk.Label(top_frame, text="‚ùå Model nen√≠ naƒçten")
        self.model_status.pack(side=tk.LEFT)
        
        # St≈ôedn√≠ panel - obr√°zek
        middle_frame = ttk.LabelFrame(main_frame, text="üñºÔ∏è Obr√°zek a detekce", padding=10)
        middle_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Tlaƒç√≠tko pro naƒçten√≠ obr√°zku
        image_controls = ttk.Frame(middle_frame)
        image_controls.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(image_controls, text="üì∏ Vybrat obr√°zek", 
                  command=self.load_image).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(image_controls, text="üîç Detekovat objekty", 
                  command=self.detect_objects).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(image_controls, text="üîÑ Reset obr√°zek", 
                  command=self.reset_image).pack(side=tk.LEFT)
        
        # Confidence threshold
        ttk.Label(image_controls, text="Confidence:").pack(side=tk.LEFT, padx=(20, 5))
        self.confidence_var = tk.DoubleVar(value=0.5)
        confidence_scale = ttk.Scale(image_controls, from_=0.1, to=0.9, 
                                   variable=self.confidence_var, orient=tk.HORIZONTAL, length=150)
        confidence_scale.pack(side=tk.LEFT, padx=(0, 5))
        
        self.confidence_label = ttk.Label(image_controls, text="0.5")
        self.confidence_label.pack(side=tk.LEFT)
        confidence_scale.configure(command=self.update_confidence_label)
        
        # Canvas pro obr√°zek
        canvas_frame = ttk.Frame(middle_frame)
        canvas_frame.pack(fill=tk.BOTH, expand=True)
        
        self.canvas = tk.Canvas(canvas_frame, bg='white', relief=tk.SUNKEN, borderwidth=2)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Scrollbary pro canvas
        v_scrollbar = ttk.Scrollbar(canvas_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.configure(yscrollcommand=v_scrollbar.set)
        
        h_scrollbar = ttk.Scrollbar(middle_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        h_scrollbar.pack(fill=tk.X)
        self.canvas.configure(xscrollcommand=h_scrollbar.set)
        
        # Spodn√≠ panel - v√Ωsledky
        bottom_frame = ttk.LabelFrame(main_frame, text="üìä V√Ωsledky detekce", padding=10)
        bottom_frame.pack(fill=tk.X)
        
        # Treeview pro v√Ωsledky
        columns = ('ID', 'Kategorie', 'Confidence', 'X', 'Y', '≈†√≠≈ôka', 'V√Ω≈°ka')
        self.results_tree = ttk.Treeview(bottom_frame, columns=columns, show='headings', height=6)
        
        for col in columns:
            self.results_tree.heading(col, text=col)
            self.results_tree.column(col, width=100)
        
        self.results_tree.pack(fill=tk.X, pady=(0, 5))
        
        # Statistiky
        self.stats_label = ttk.Label(bottom_frame, text="≈Ω√°dn√© detekce")
        self.stats_label.pack()
        
    def update_confidence_label(self, value):
        """Aktualizuje label pro confidence threshold"""
        self.confidence_label.config(text=f"{float(value):.2f}")
        
    def load_model(self):
        """Naƒçte RF-DETR model"""
        model_path = filedialog.askopenfilename(
            title="Vyberte model checkpoint",
            filetypes=[
                ("PyTorch checkpoints", "*.pth"),
                ("V≈°echny soubory", "*.*")
            ],
            initialdir="."
        )
        
        if not model_path:
            return
            
        self.model_status.config(text="‚è≥ Naƒç√≠t√°m model...")
        self.root.update()
        
        if self.load_model_from_path(model_path):
            self.model_status.config(text=f"‚úÖ Model naƒçten: {Path(model_path).name}")
            # ULO≈Ω√çME CESTU DO CONFIG
            self.config["last_model_path"] = str(model_path)
            self.save_config()
            messagebox.showinfo("√öspƒõch", f"Model byl √∫spƒõ≈°nƒõ naƒçten!\n{Path(model_path).name}")
        else:
            self.model_status.config(text="‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ modelu")
            messagebox.showerror("Chyba", f"Nepoda≈ôilo se naƒç√≠st model:\n{Path(model_path).name}")
            
    def load_image(self):
        """Naƒçte obr√°zek s o≈°et≈ôen√≠m v≈°ech form√°t≈Ø"""
        # Vytvo≈ôen√≠ filtru pro v≈°echny podporovan√© form√°ty
        formats_str = " ".join([f"*{fmt}" for fmt in self.supported_formats])
        formats_str += " " + " ".join([f"*{fmt.upper()}" for fmt in self.supported_formats])
        
        image_path = filedialog.askopenfilename(
            title="Vyberte obr√°zek",
            initialdir=self.config.get("last_image_dir", "."),
            filetypes=[
                ("V≈°echny obr√°zky", formats_str),
                ("JPEG", "*.jpg *.jpeg *.JPG *.JPEG"),
                ("PNG", "*.png *.PNG"),
                ("BMP", "*.bmp *.BMP"),
                ("TIFF", "*.tiff *.tif *.TIFF *.TIF"),
                ("WebP", "*.webp *.WEBP"),
                ("V≈°echny soubory", "*.*")
            ]
        )
        
        if not image_path:
            return
            
        # Kontrola podporovan√©ho form√°tu
        if not self.is_supported_image(image_path):
            messagebox.showwarning("Nepodporovan√Ω form√°t", 
                                 f"Soubor {Path(image_path).suffix} nen√≠ podporov√°n!\n"
                                 f"Podporovan√© form√°ty: {', '.join(sorted(self.supported_formats))}")
            return
            
        try:
            # Naƒçten√≠ obr√°zku s o≈°et≈ôen√≠m r≈Øzn√Ωch form√°t≈Ø
            self.original_image = Image.open(image_path)
            
            # Konverze na RGB pokud je pot≈ôeba (nap≈ô. RGBA, P, L)
            if self.original_image.mode != 'RGB':
                self.original_image = self.original_image.convert('RGB')
            
            self.current_image = self.original_image.copy()
            
            # V√Ωpoƒçet scale pro zobrazen√≠
            self.calculate_display_scale()
            
            # Zobrazen√≠ na canvasu
            self.display_image()
            
            # Vymaz√°n√≠ p≈ôedchoz√≠ch v√Ωsledk≈Ø
            self.clear_results()
            
            # ULO≈ΩEN√ç DO CONFIG
            self.config["last_image_dir"] = str(Path(image_path).parent)
            self.config["last_image_path"] = image_path
            self.save_config()
            
            # Informace o obr√°zku
            size_info = f"üìè {self.original_image.width}√ó{self.original_image.height}px"
            if self.display_scale != 1.0:
                size_info += f" (zobrazeno {self.display_scale:.1%})"
            print(f"‚úÖ Obr√°zek naƒçten: {Path(image_path).name} {size_info}")
            
        except Exception as e:
            messagebox.showerror("Chyba", f"Nepoda≈ôilo se naƒç√≠st obr√°zek:\n{str(e)}")
            
    def calculate_display_scale(self):
        """Vypoƒçte scale pro zobrazen√≠ na obrazovce"""
        if self.original_image is None:
            return
            
        # Maxim√°ln√≠ velikost pro zobrazen√≠
        max_display_width = 1000
        max_display_height = 600
        
        width_scale = max_display_width / self.original_image.width
        height_scale = max_display_height / self.original_image.height
        
        self.display_scale = min(1.0, width_scale, height_scale)
            
    def display_image(self):
        """Zobraz√≠ obr√°zek na canvasu s automatick√Ωm ≈°k√°lov√°n√≠m"""
        if self.current_image is None:
            return
            
        # Vytvo≈ôen√≠ kopie pro zobrazen√≠
        display_image = self.current_image.copy()
        
        # ≈†k√°lov√°n√≠ podle vypoƒç√≠tan√©ho pomƒõru
        if self.display_scale != 1.0:
            new_width = int(display_image.width * self.display_scale)
            new_height = int(display_image.height * self.display_scale)
            display_image = display_image.resize((new_width, new_height), Image.Resampling.LANCZOS)
        
        # Konverze pro tkinter
        self.photo = ImageTk.PhotoImage(display_image)
        
        # Vymaz√°n√≠ canvasu a zobrazen√≠ obr√°zku
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.photo)
        
        # Nastaven√≠ scroll region
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        
    def detect_objects(self):
        """Provede detekci objekt≈Ø"""
        if self.model is None:
            messagebox.showwarning("Upozornƒõn√≠", "Nejprve naƒçtƒõte model!")
            return
            
        if self.original_image is None:
            messagebox.showwarning("Upozornƒõn√≠", "Nejprve naƒçtƒõte obr√°zek!")
            return
            
        try:
            # Konverze PIL na numpy array
            image_array = np.array(self.original_image)
            if len(image_array.shape) == 3 and image_array.shape[2] == 3:
                # RGB -> BGR pro OpenCV
                image_array = cv2.cvtColor(image_array, cv2.COLOR_RGB2BGR)
            
            # SPR√ÅVN√Å PREDIKCE - pou≈æijeme naƒçten√Ω model!
            confidence_threshold = self.confidence_var.get()
            
            # Pou≈æijeme model kter√Ω u≈æ m√°me naƒçten√Ω
            results = self.model.predict(
                image_array, 
                confidence=confidence_threshold
                # ODSTRANƒöNO: checkpoint=self.model_path - model u≈æ je naƒçten√Ω!
            )
            
            # Zpracov√°n√≠ v√Ωsledk≈Ø
            self.process_results(results, image_array)
            
        except Exception as e:
            messagebox.showerror("Chyba", f"Chyba p≈ôi detekci:\n{str(e)}")
            
    def process_results(self, results, image_array):
        """Zpracuje v√Ωsledky detekce a zobraz√≠ je"""
        if self.original_image is None:
            return
            
        # Pracovn√≠ kopie p≈Øvodn√≠ho obr√°zku
        result_image = self.original_image.copy()
        
        # Vymaz√°n√≠ p≈ôedchoz√≠ch v√Ωsledk≈Ø
        self.clear_results()
        
        detections = []
        
        # Zpracov√°n√≠ detekc√≠ podle typu results
        try:
            if hasattr(results, 'xyxy') and hasattr(results, 'confidence') and hasattr(results, 'class_id'):
                # supervision.detection.core.Detections form√°t (RF-DETR 1.2.1)
                boxes = results.xyxy  # ji≈æ numpy array [N, 4] - x1, y1, x2, y2
                scores = results.confidence  # numpy array [N]
                classes = results.class_id  # numpy array [N]
                
                print(f"üîç Supervision.Detections: {len(boxes)} objekt≈Ø")
                for i, (box, score, cls) in enumerate(zip(boxes, scores, classes)):
                    cat_name = self.categories.get(cls, f"Unknown_{cls}")
                    print(f"   {i+1}. CLASS_ID={cls} -> {cat_name}: {score:.3f} - bbox: {box}")
                
            elif isinstance(results, list) and len(results) > 0:
                # RF-DETR tuple form√°t - ka≈æd√Ω v√Ωsledek je tuple (bbox, None, score, class, None, {})
                boxes_list = []
                scores_list = []
                classes_list = []
                
                for result in results:
                    if isinstance(result, tuple) and len(result) >= 4:
                        bbox, _, score, cls, _, _ = result
                        if bbox is not None and score is not None and cls is not None:
                            boxes_list.append(bbox)
                            scores_list.append(float(score))
                            classes_list.append(int(cls))
                
                boxes = np.array(boxes_list) if boxes_list else np.array([])
                scores = np.array(scores_list) if scores_list else np.array([])
                classes = np.array(classes_list) if classes_list else np.array([])
                
                print(f"üîç RF-DETR tuple detekce: {len(boxes)} objekt≈Ø")
                for i, (box, score, cls) in enumerate(zip(boxes, scores, classes)):
                    cat_name = self.categories.get(cls, f"Unknown_{cls}")
                    print(f"   {i+1}. CLASS_ID={cls} -> {cat_name}: {score:.3f} - bbox: {box}")
                
            elif hasattr(results, 'boxes') and results.boxes is not None:
                # YOLOv8/Ultralytics form√°t
                boxes = results.boxes.xyxy.cpu().numpy()  # x1, y1, x2, y2
                scores = results.boxes.conf.cpu().numpy()
                classes = results.boxes.cls.cpu().numpy().astype(int)
                
            elif hasattr(results, 'pred') and len(results.pred) > 0:
                # Jin√Ω form√°t
                pred = results.pred[0]
                boxes = pred[:, :4].cpu().numpy()  # x1, y1, x2, y2
                scores = pred[:, 4].cpu().numpy()
                classes = pred[:, 5].cpu().numpy().astype(int)
                
            else:
                # ≈Ω√°dn√© detekce nebo nezn√°m√Ω form√°t
                print(f"‚ö†Ô∏è  Nezn√°m√Ω form√°t v√Ωsledk≈Ø: {type(results)}")
                if hasattr(results, '__len__'):
                    print(f"    D√©lka: {len(results)}")
                if isinstance(results, list) and len(results) > 0:
                    print(f"    Prvn√≠ prvek: {type(results[0])}")
                boxes = np.array([])
                scores = np.array([])
                classes = np.array([])
                
        except Exception as e:
            print(f"Chyba p≈ôi zpracov√°n√≠ v√Ωsledk≈Ø: {e}")
            boxes = np.array([])
            scores = np.array([])
            classes = np.array([])
        
        # Kreslen√≠ bounding box≈Ø na PIL obr√°zek
        if len(boxes) > 0:
            draw = ImageDraw.Draw(result_image)
            
            # Pokus o naƒçten√≠ fontu
            try:
                font = ImageFont.truetype("arial.ttf", 20)
            except:
                try:
                    font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
                except:
                    font = ImageFont.load_default()
            
            for i, (box, score, cls) in enumerate(zip(boxes, scores, classes)):
                x1, y1, x2, y2 = box.astype(int)
                
                # Z√≠sk√°n√≠ n√°zvu kategorie a barvy
                category_name = self.categories.get(cls, f"Unknown_{cls}")
                color = self.colors.get(cls, (128, 128, 128))
                
                # Kreslen√≠ obd√©ln√≠ku
                draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
                
                # Text s kategori√≠ a confidence
                label = f"{category_name} {score:.2f}"
                
                # Pozad√≠ pro text
                bbox = draw.textbbox((x1, y1 - 25), label, font=font)
                draw.rectangle(bbox, fill=color)
                
                # Text
                draw.text((x1, y1 - 25), label, fill=(255, 255, 255), font=font)
                
                # Ulo≈æen√≠ detekce
                detections.append({
                    'id': i + 1,
                    'category': category_name,
                    'confidence': score,
                    'x': x1,
                    'y': y1,
                    'width': x2 - x1,
                    'height': y2 - y1
                })
        
        # Aktualizace souƒçasn√©ho obr√°zku
        self.current_image = result_image
        
        # Zobrazen√≠ v√Ωsledku
        self.display_image()
        
        # Zobrazen√≠ v√Ωsledk≈Ø v tabulce
        self.display_results(detections)
        
    def display_results(self, detections):
        """Zobraz√≠ v√Ωsledky v tabulce"""
        # Vymaz√°n√≠ p≈ôedchoz√≠ch v√Ωsledk≈Ø
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # P≈ôid√°n√≠ nov√Ωch v√Ωsledk≈Ø
        for detection in detections:
            self.results_tree.insert('', 'end', values=(
                detection['id'],
                detection['category'],
                f"{detection['confidence']:.3f}",
                detection['x'],
                detection['y'],
                detection['width'],
                detection['height']
            ))
        
        # Statistiky
        if detections:
            stats_by_category = {}
            for det in detections:
                cat = det['category']
                if cat not in stats_by_category:
                    stats_by_category[cat] = 0
                stats_by_category[cat] += 1
            
            stats_text = f"Celkem: {len(detections)} detekc√≠ | "
            stats_text += " | ".join([f"{cat}: {count}" for cat, count in stats_by_category.items()])
            self.stats_label.config(text=stats_text)
        else:
            self.stats_label.config(text="≈Ω√°dn√© detekce")
            
    def clear_results(self):
        """Vyma≈æe v√Ωsledky"""
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        self.stats_label.config(text="≈Ω√°dn√© detekce")
        
    def reset_image(self):
        """Resetuje obr√°zek na p≈Øvodn√≠ stav"""
        if self.original_image is not None:
            self.current_image = self.original_image.copy()
            self.display_image()
            self.clear_results()


def main():
    """Hlavn√≠ funkce aplikace"""
    try:
        import tkinter as tk
        root = tk.Tk()
        
        print("üöÄ RF-DETR Hard Hat Workers GUI Tester")
        print("=" * 50)
        print(f"‚úÖ CUDA dostupn√°: {torch.cuda.get_device_name()}" if torch.cuda.is_available() else "‚ö†Ô∏è  CUDA nedostupn√°")
        print(f"üìÅ Pracovn√≠ adres√°≈ô: {Path.cwd()}")
        
        # Vytvo≈ô√≠me GUI jednou a spust√≠me
        gui = ModelTesterGUI(root)
        
        print("\nüìã GUI je p≈ôipraveno!")
        print("üí° Tip: Model a posledn√≠ obr√°zek se ukl√°daj√≠ automaticky")
        
        # Spust√≠me GUI
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi spu≈°tƒõn√≠ GUI: {e}")
        print("üí° Mo≈æn√° chyb√≠ tkinter. Nainstaluj: sudo apt-get install python3-tk")


if __name__ == "__main__":
    main()
